using System;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using AtCoder.Embedded;
using AtCoder.Internal;
using AtCoder.Internal.CodeExpander;

namespace AtCoder
{
    public static class Expander
    {

        private static readonly AclFileInfoDetail ExpanderFileInfo
            = new AclFileInfoDetail(
                "Expander",
                new string[] { "AtCoder.Expander" },
                new string[] { "using System.Diagnostics;", },
                Array.Empty<string>(),
                "namespace AtCoder { public static class Expander {[Conditional(\"DEBUG\")] public static void Expand(string inputFilePath = \"\", string outputFilePath = \"\", bool checkLastWriteTime = true, ExpandMethod expandMethod = ExpandMethod.All) { } } public enum ExpandMethod { " + string.Join(", ", typeof(ExpandMethod).GetEnumNames()) + " } }");
        internal static AclFileInfoDetail[] AclFileInfoDetails = AutoGenerated__SourceInfo.FileInfo.Select(f => new AclFileInfoDetail(f)).Append(ExpanderFileInfo).ToArray();
        internal static string ToCombinedFilePath(string origFilePath)
            => Path.Combine(Path.GetDirectoryName(origFilePath)!, "Combined.csx");

        public static void Expand([CallerFilePath] string? inputFilePath = null, string? outputFilePath = null, bool checkLastWriteTime = false, ExpandMethod expandMethod = ExpandMethod.All)
        {
            if (inputFilePath == null) throw new ArgumentNullException(nameof(inputFilePath));
            var inputFileInfo = new FileInfo(inputFilePath);

            if (!inputFileInfo.Exists) throw new ArgumentException($"Not found: {inputFilePath}", nameof(inputFilePath));

            if (outputFilePath == null)
            {
                var dir = inputFileInfo.DirectoryName;
                if (dir == null) throw new ArgumentException("invalid path", nameof(inputFilePath));
                outputFilePath = Path.Combine(dir, "Combined.csx");
            }
            var code = File.ReadAllText(inputFilePath);
            var expander = CodeExpander.Create(expandMethod, code, AclFileInfoDetails);
            var head = checkLastWriteTime ? $"// Last: {inputFileInfo.LastWriteTimeUtc.Ticks}" : null;
            new ExpandWriter(outputFilePath, head, expander).Expand();
        }
    }
}
